<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
	version="2.4">
	<!-- description du déploiement de l'appli web, utilisé par TOMCAT -->
	<!-- Lors du déploiement d'une Portlet via un fichier WAR et la tâche ANT d'uPortal(deployPortletApp),
		le fichier web.xml est modifié de façon spécifique Pluto. 
		On peut faire un fichier web-pluto.xml qui intègre les modifications de Pluto afin de déployer 
		directement dans Tomcat.
	-->
	
	<!-- no code in JSP -->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<scripting-invalid>true</scripting-invalid>
		</jsp-property-group>
	</jsp-config>

	<!-- Nom de notre Portlet -->
	<display-name>Portlet lecture</display-name>

	<!-- Initialisation de paramètres utilisés par l'application web => ici, il s'agit d'un -->

	<!-- Fichier de configuration Spring => sera appelé au démarrage TOMCAT-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/classes/applicationContextRaymond.xml
		</param-value>
	</context-param>
	<!-- Fichier de config JSF -->
	<context-param>
		<param-name>javax.faces.CONFIG_FILES</param-name>
		<!-- 
			Comma separated list of URIs of (additional) faces config files.
			(e.g. /WEB-INF/my-config.xml)
			See JSF 1.0 PRD2, 10.3.2
		-->
		<param-value>
			/WEB-INF/classes/faces-config-raymond.xml
		</param-value>
	</context-param>
	<!-- Mode de stockage des états des composants graphiques JSF -->
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<!-- 
			State saving method: "client" or "server" (= default)
			See JSF Specification 2.5.2
		-->
		<param-value>server</param-value>
	</context-param>

	<!-- Listener SPRING afin de savoir quand le contexte est initialisé pour ensuite charger la config Spring -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- Listener JSF -->
	<listener>
		<listener-class>
			org.apache.myfaces.webapp.StartupServletContextListener
		</listener-class>
	</listener>

	<!-- Servlet wrapper  : une pour chaque portlet définie dans le portlet.xml
		mapping pour cette servlet :/jsf/* ???-->
	<servlet>
		<servlet-name>lecture</servlet-name>
		<servlet-class>
			org.apache.pluto.core.PortletServlet
		</servlet-class>
		<init-param>
			<!-- classe wrappée par pluto (définie dans portlet-class du portlet.xml) -->
			<param-name>portlet-class</param-name>
			<param-value>
				org.esupportail.lecture.portlet.MyLecturePortlet
			</param-value>
		</init-param>
		<init-param>
			<!-- Identifiant unique de notre portlet :
				nom de l'appli -futur nom du contexte tomcat- + du portlet-name du portlet.xml 
			-->
			<param-name>portlet-guid</param-name>
			<param-value>esup-lecture.lecture</param-value>
		</init-param>
	</servlet>

	<!-- Servlet JSF et son mapping : toutes les pages .faces -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>lecture</servlet-name>
		<url-pattern>/jsf/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.faces</url-pattern>
	</servlet-mapping>

	<!-- Welcome files -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- Interdire l'accès direct aux pages .jsp -->
	<!-- 
		<security-constraint>
		<display-name>
		Prevent access to raw JSP pages that are for JSF pages.
		</display-name>
		<web-resource-collection>
		<web-resource-name>Raw-JSF-JSP-Pages</web-resource-name>
		<url-pattern>*.jsp</url-pattern>
		</web-resource-collection>
		<auth-constraint>
		<description>No roles, so no direct access</description>
		</auth-constraint>
		</security-constraint>
	-->
</web-app>