<project name="esup-commons" default="commons-compile" basedir=".">

	<property name="devel" value="false" />
	
	<property name="tomcat.version" value="5.5.17"/>
	<property name="ant-contrib.version" value="1.0"/>
	<property name="utils.dir" value="${basedir}/utils"/>
	<taskdef 
		resource="net/sf/antcontrib/antlib.xml" 
		classpath="${utils.dir}/ant/ant-contrib-${ant-contrib.version}.jar"/>
	
	<property name="webapp.dir" value="${basedir}/webapp"/>
	<property name="src.dir" value="${basedir}/src"/>
	<property name="lib.dir" value="${webapp.dir}/WEB-INF/lib"/>
	<property name="media.dir" value="${webapp.dir}/media"/>
	<property name="props.dir" value="${basedir}/properties"/>
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes" value="${build.dir}/WEB-INF/classes"/>
	<property name="doc.dir" value="${basedir}/docs"/>
	<property name="javadoc.dir" value="${doc.dir}/api"/>
	<property name="app.config" value="${basedir}/version.properties"/>
	<property name="dist.dir" value="${basedir}/dist"/>

	<target name="read-commons-properties">
		<if>
			<not>
				<available file="${basedir}/build.properties"/>
			</not>
			<then>
				<fail message="${basedir}/build.properties not found." />	
			</then>
		</if>
		<property file="${basedir}/build.properties" />
		<if>
			<not>
				<isset property="quick-start"/>
			</not>
			<then>
				<property name="quick-start" value="false" />
				<echo>Property quick-start is not set, defaults to ${quick-start}.</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="quick-start"/>
			<then>
				<echo>quick-start=true, an embedded tomcat will be used.</echo>
				<property name="tomcat.zip" value="${utils.dir}/tomcat/apache-tomcat-${tomcat.version}.zip"/>
				<if>
					<not>
						<available file="${tomcat.zip}" />
					</not>
					<then>
						<fail>${tomcat.zip} not found, probably not a quick start installation.</fail>
					</then>
				</if>
				<if>
					<isset property="tomcat.home"/>
					<then>
						<fail>Property tomcat.home should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="tomcat.home" value="${basedir}/apache-tomcat-${tomcat.version}"/>
				<if>
					<isset property="deploy.type"/>
					<then>
						<fail>Property deploy.type should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="deploy.type" value="servlet" />
				<echo>deploy.type=${deploy.type}</echo>
				<if>
					<isset property="deploy.home"/>
					<then>
						<fail>Property deploy.home should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="deploy.home" value="${basedir}/deploy" />
				<echo>deploy.home=${deploy.home}</echo>
				<if>
					<not>
						<isset property="tomcat.host" />
					</not>
					<then>
						<property name="tomcat.host" value="localhost" />
						<echo>tomcat.host is not set, defaults to ${tomcat.host}.</echo>
					</then>
					<else>
						<echo>tomcat.host=${tomcat.host}</echo>
					</else>
				</if>
				<if>
					<not>
						<isset property="tomcat.port" />
					</not>
					<then>
						<property name="tomcat.port" value="8080" />
						<echo>tomcat.port is not set, defaults to ${tomcat.port}.</echo>
					</then>
					<else>
						<echo>tomcat.port=${tomcat.port}</echo>
					</else>
				</if>
				<if>
					<equals arg1="${tomcat.port}" arg2="80" />
					<then>
						<property name="tomcat.port.string" value="" />
					</then>
					<else>
						<property name="tomcat.port.string" value=":${tomcat.port}" />
					</else>
				</if>
				<if>
					<not>
						<isset property="tomcat.shutdown-port" />
					</not>
					<then>
						<property name="tomcat.shutdown-port" value="8005" />
						<echo>tomcat.shutdown-port is not set, defaults to ${tomcat.shutdown-port}.</echo>
					</then>
					<else>
						<echo>tomcat.shutdown-port=${tomcat.shutdown-port}</echo>
					</else>
				</if>
				<if>
					<isset property="tomcat.path"/>
					<then>
						<fail>Property tomcat.path should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="tomcat.path" value="" />
				<echo>tomcat.path=${tomcat.path}</echo>
				<property name="tomcat.url" value="http://${tomcat.host}${tomcat.port.string}${tomcat.path}" />
				<echo>tomcat.url=${tomcat.url}</echo>
			</then>
			<else>
				<if>
					<not>
						<isset property="deploy.type"/>
					</not>
					<then>
						<property name="deploy.type" value="servlet" />
						<echo>Property deploy.type is not set, defaults to ${deploy.type}.</echo>
					</then>
				</if>
				<switch value="${deploy.type}">
					<case value="servlet" />
					<case value="portlet" />
					<default>
						<fail>deploy.type=${deploy.type} is not supported (supported values are servlet and portlet).</fail>
					</default>
				</switch>
				<echo>deploy.type=${deploy.type}</echo>
				<if>
					<not>
						<isset property="deploy.home"/>
					</not>
					<then>
						<echo>Please set property deploy.home in build.properties.</echo>
					</then>
				</if>
				<echo>deploy.home=${deploy.home}</echo>
			</else>
		</if>
		<if>
			<ispropertytrue property="devel" />
			<then>
				<path id="compile.classpath">
					<fileset dir="${commons.lib.dir}" includes="**/*.jar" />
					<fileset dir="${lib.dir}" includes="**/*.jar" />
					<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
				</path>
			</then>
			<else>
				<path id="compile.classpath">
					<fileset dir="${lib.dir}" includes="**/*.jar" />
					<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
				</path>
			</else>
		</if>
		<path id="batch.classpath">
			<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
			<fileset dir="${build.dir}/WEB-INF/lib" includes="**/*.jar" />
			<pathelement path="${build.dir}"/>
			<pathelement path="${build.classes}"/>
		</path>
	</target>

	<target name="check-cache-config" >
		<property name="cache.config" value="${props.dir}/cache/cache.xml"/>
		<if>
			<not>
				<available file="${cache.config}"/>
			</not>
			<then>
				<fail message="${cache.config} not found." />	
			</then>
		</if>
		<property name="ehcache.config" value="${props.dir}/cache/ehcache.xml"/>
		<if>
			<not>
				<available file="${ehcache.config}"/>
			</not>
			<then>
				<fail message="${ehcache.config} not found." />	
			</then>
		</if>
	</target>

	<target name="check-exceptionHandling-config" >
		<property name="exceptionHandling.config" value="${props.dir}/exceptionHandling/exceptionHandling.xml"/>
		<if>
			<not>
				<available file="${exceptionHandling.config}"/>
			</not>
			<then>
				<fail message="${exceptionHandling.config} not found." />	
			</then>
		</if>
	</target>

	<target name="check-i18n-config" >
		<property name="i18n.config" value="${props.dir}/i18n/i18n.xml"/>
		<if>
			<not>
				<available file="${i18n.config}"/>
			</not>
			<then>
				<fail message="${i18n.config} not found." />	
			</then>
		</if>
	</target>
	
	<target name="check-ldap-config" >
		<property name="ldap.config" value="${props.dir}/ldap/ldap.xml"/>
		<if>
			<not>
				<available file="${ldap.config}"/>
			</not>
			<then>
				<fail message="${ldap.config} not found." />	
			</then>
		</if>
	</target>

	<target name="check-smtp-config" >
		<property name="smtp.config" value="${props.dir}/smtp/smtp.xml"/>
		<if>
			<not>
				<available file="${smtp.config}"/>
			</not>
			<then>
				<fail message="${smtp.config} not found." />	
			</then>
		</if>
	</target>

	<target name="check-tags-config" >
		<property name="tags.config" value="${props.dir}/tags/tags.xml"/>
		<if>
			<not>
				<available file="${tags.config}"/>
			</not>
			<then>
				<echo message="${tags.config} is missing, default values will be used for esup-commons.tld." />
			</then>
		</if>
	</target>
		
	<target name="check-hibernate-config" >
		<property name="hibernate.config" value="${props.dir}/dao/hibernate/hibernate.cfg.xml"/>
		<if>
			<not>
				<available file="${hibernate.config}"/>
			</not>
			<then>
				<fail message="${hibernate.config} not found." />	
			</then>
		</if>
	</target>
		
	<target name="check-log4j-config" >
		<property name="log4j.config" value="${props.dir}/logging/log4j.properties"/>
		<if>
			<not>
				<available file="${log4j.config}"/>
			</not>
			<then>
				<fail message="${log4j.config} not found." />	
			</then>
		</if>
	</target>

	<target name="check-log4j-batch-config" >
		<property name="log4j.batch-config" value="${props.dir}/logging/log4j-batch.properties"/>
		<if>
			<not>
				<available file="${log4j.batch-config}"/>
			</not>
			<then>
				<fail message="${log4j.batch-config} not found." />	
			</then>
		</if>
	</target>
		
	<target name="check-auth-config" >
		<property name="auth.config" value="${props.dir}/auth/auth.xml"/>
		<if>
			<not>
				<available file="${auth.config}"/>
			</not>
			<then>
				<fail message="${auth.config} not found." />	
			</then>
		</if>
	</target>
		
	<target name="check-webapp-config" >
		<property name="webapp.config" value="${webapp.dir}/WEB-INF/web.xml"/>
		<property name="portlet.config" value="${webapp.dir}/WEB-INF/portlet.xml"/>
		<if>
			<not>
				<available file="${webapp.config}"/>
			</not>
			<then>
				<fail message="${webapp.config} not found." />	
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${deploy.type}" arg2="portlet" />
				<not>
					<available file="${portlet.config}"/>
				</not>
			</and>
			<then>
				<fail message="${portlet.config} not found." />	
			</then>
		</if>
	</target>
		
	<target name="check-tomcat" depends="read-commons-properties">
		<property name="tomcat.bootstrap" value="${tomcat.home}/bin/bootstrap.jar"/>
		<if>
			<not>
				<available file="${tomcat.bootstrap}"/>
			</not>
			<then>
				<if>
					<ispropertytrue property="quick-start" />
					<then>
						<echo>${tomcat.bootstrap} not found, installing a new instance...</echo>
						<unzip src="${tomcat.zip}"  dest="${basedir}" />
					</then>
					<else>
						<fail message="${tomcat.bootstrap} not found, please check your tomcat installation" />	
					</else>
				</if>
			</then>
		</if>
		<if>
			<ispropertytrue property="quick-start" />
			<then>
				<if>
					<not>
						<available file="${tomcat.bootstrap}"/>
					</not>
					<then>
						<echo>${tomcat.bootstrap} not found, installing a new instance...</echo>
						<unzip src="${tomcat.zip}"  dest="${basedir}" />
						<echo>done.</echo>
					</then>
				</if>
				<copy file="${utils.dir}/tomcat/server.xml" tofile="${tomcat.home}/conf/server.xml" overwrite="true">
					<filterchain>
						<expandproperties/>
					</filterchain>
				</copy>
			</then>
		</if>
		<if>
			<not>
				<available file="${tomcat.bootstrap}"/>
			</not>
			<then>
				<fail message="${tomcat.bootstrap} not found, please check your tomcat installation" />	
			</then>
		</if>
		<if>
			<not>
				<isset property="tomcat.keystore" />
			</not>
			<then>
				<property name="tomcat.keystore" value="${utils.dir}/cas/cru-root.keystore"/>
				<echo message="Property tomcat.keystore not set, using default (${tomcat.keystore})" />	
			</then>
		</if>
	</target>

	<target name="check-commons-shared-config" depends="read-commons-properties,check-cache-config,check-exceptionHandling-config,check-i18n-config,check-ldap-config,check-smtp-config,check-hibernate-config,check-auth-config" />

	<target name="check-commons-web-config" depends="read-commons-properties,check-commons-shared-config,check-webapp-config,check-tags-config,check-log4j-config,check-tomcat" />

	<target name="check-commons-batch-config" depends="read-commons-properties,check-commons-shared-config,check-log4j-batch-config" />

	<target name="commons-prepare" depends="read-commons-properties" >
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${javadoc.dir}" />
	</target>
	
	<target name="commons-compile-java" depends="commons-prepare">
		<property name="compile.debug" value="true" />
		<property name="compile.deprecation" value="true" />
		<property name="compile.optimize" value="true" />
		<if>
			<ispropertytrue property="devel" />
			<then>
				<javac 
					srcdir="${commons.src.dir}" 
					destdir="${build.classes}" 
					debug="${compile.debug}" 
					deprecation="${compile.deprecation}" 
					optimize="${compile.optimize}">
					<classpath refid="compile.classpath" />
				</javac>
			</then>
		</if>
		<javac 
			srcdir="${src.dir}" 
			destdir="${build.classes}" 
			debug="${compile.debug}" 
			deprecation="${compile.deprecation}" 
			optimize="${compile.optimize}">
			<classpath refid="compile.classpath" />
		</javac>
	</target>
	
	<target name="commons-compile-web" depends="commons-prepare">
		<if>
			<ispropertytrue property="devel" />
			<then>
				<copy todir="${build.classes}/properties" >
					<fileset dir="${commons.props.dir}" />
				</copy>
				<copy todir="${build.dir}" >
					<fileset dir="${commons.webapp.dir}" />
				</copy>
			</then>
		</if>
		<copy todir="${build.classes}/properties" >
			<fileset dir="${props.dir}" />
		</copy>
		<copy todir="${build.dir}/WEB-INF" overwrite="true" file="${webapp.dir}/WEB-INF/web.xml" >
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<copy todir="${build.dir}" >
			<fileset dir="${webapp.dir}" excludes="WEB-INF/web*.xml" />
		</copy>
		<if>
			<equals arg1="${deploy.type}" arg2="servlet" />
			<then>
				<copy todir="${build.dir}/WEB-INF/lib" file="${utils.dir}/lib/portlet-api-1.0.jar" />
			</then>
		</if>
	</target>
	
	<target name="commons-compile" depends="commons-compile-java,commons-compile-web"/>
	
	<target name="commons-deploy" depends="commons-compile" >
		<if>
			<not>
				<isset property="deploy.home" />
			</not>
			<then>
				<fail message="Please set property deploy.home in build.properties" />	
			</then>
		</if>
		<if>
			<equals arg1="${deploy.type}" arg2="servlet" />
			<then>
				<mkdir dir="${deploy.home}" />
				<copy todir="${deploy.home}" >
					<fileset dir="${build.dir}" />
				</copy>
			</then>
			<else>
				<mkdir dir="${deploy.home}" />
				<copy todir="${deploy.home}" >
					<fileset dir="${build.dir}" />
				</copy>
				<!--mkdir dir="${dist.dir}" />
				<property name="war" value="${app.name}.war" />
				<echo>creating ${war}...</echo>
				<jar basedir="${build.dir}" destfile="${dist.dir}/${war}" />
				<switch value="${portal.type}">
					<case value="uportal" />
					<default>
						<fail>portal.type=${portal.type} is unknown, you have to deploy the WAR file manually.</fail>
					</default>
				</switch>
				<switch value="${portal.type}">
					<case value="uportal" >
						<if>
							<not>
								<isset property="portal.home" />
							</not>
							<then>
								<fail message="Please set property portal.home in build.properties" />
							</then>
						</if>
						<path id="portal.classpath">
							<fileset dir="${portal.home}/lib" includes="**/*.jar" />
						</path>
					    <property name="portletApp" value="${dist.dir}/${war}" />
					    <java fork="true" failonerror="true" dir="${portal.home}" classname="org.jasig.portal.container.deploy.Deployer">
					      <classpath>
					        <pathelement path="${portal.home}/build/WEB-INF/classes"/>
					        <path refid="portal.classpath"/>
					      </classpath>
					      <arg value="${deploy.home}"/>
					      <arg value="${portletApp}"/>
					    </java>
						<ant dir="${portal.home}" target="deployPortletApp" />
					</case>
				</switch-->
			</else>
		</if>
	</target>

	<target name="commons-clean" depends="read-commons-properties">
		<if>
			<ispropertytrue property="quick-start" />
			<then>
				<delete dir="${tomcat.home}" />
			</then>
		</if>
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${deploy.home}" />
		<delete dir="${javadoc.dir}" />
		<delete dir="${doc.dir}/examples" />
	</target>

	<property name="commons.recover.files" value="
		build.properties
		webapp/WEB-INF/web.xml
		properties/tags/tags.xml
		properties/smtp/smtp.xml
		properties/logging/log4j.properties
		properties/logging/log4j-batch.properties
		properties/ldap/ldap.xml
		properties/i18n/i18n.xml
		properties/bundles/Messages_*.properties
		properties/exceptionHandling/exceptionHandling.xml
		properties/dao/dao.xml
		properties/dao/hibernate/hibernate.cfg.xml
		properties/auth/auth.xml
		properties/cache/cache.xml
		properties/cache/ehcache.xml
		" />
	<target name="commons-recover-config" >
		<property file="${app.config}" />
		<echo>Trying to guess the previous configuration...</echo>
		<property name="recover.types" value="quick-start,servlet,portlet" />
		<for list="${recover.previous-versions}" param="recover.ver" >
			<sequential>
				<if>
					<not>
						<isset property="recover.type" />
					</not>
					<then>
						<echo>looking for version @{recover.ver}...</echo>
						<for list="${recover.types}" param="recover.typ" >
							<sequential>
								<if>
									<not>
										<isset property="recover.type" />
									</not>
									<then>
										<echo>looking for ${app.name}-@{recover.typ}-@{recover.ver}...</echo>
										<if>
											<available file="${basedir}/../${app.name}-@{recover.typ}-@{recover.ver}" type="dir" />
											<then>
												<echo>found!</echo>
												<property name="recover.version" value="@{recover.ver}" />
												<property name="recover.type" value="@{recover.typ}" />
											</then>
											<else>
												<echo>not found.</echo>
											</else>
										</if>
									</then>
								</if>
							</sequential>
						</for>
					</then>
				</if>
			</sequential>
		</for>
		<if>
			<not>
				<isset property="recover.version" />
			</not>
			<then>
				<fail>no previous installation found, can not recover configuration files.</fail>
			</then>
		</if>
		<echo>recover.type=${recover.type}</echo>
		<echo>recover.version=${recover.version}</echo>
		<property name="recover.basedir" value="${basedir}/../${app.name}-${recover.type}-${recover.version}" />
		<echo>recover.basedir=${recover.basedir}</echo>
		<if>
			<isset property="custom.recover.files"/>
			<then>
				<property name="recover.files" value="${commons.recover.files} ${app.recover.files} ${custom.recover.files}" />
			</then>
			<else>
				<property name="recover.files" value="${commons.recover.files} ${app.recover.files}" />
			</else>
		</if>
		<echo>recover.files=${recover.files}</echo>
		<if>
			<not>
				<available file="${recover.basedir}" type="dir" />
			</not>
			<then>
				<fail>Folder ${recover.basedir} not found, can not recover configuration files.</fail>
			</then>
		</if>
		<copy todir="${basedir}" >
			<fileset dir="${recover.basedir}" includes="${recover.files}" />
		</copy>
	</target>
	
	<target name="test-ldap" depends="commons-compile,check-commons-batch-config" description="test the LDAP connection"> 
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-ldap"/>
	    </java>
	</target>	

	<target name="test-smtp" depends="commons-compile,check-commons-batch-config" description="test the SMTP connection"> 
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-smtp"/>
	    </java>
	</target>	

	<target name="test-database" depends="commons-compile,check-commons-batch-config" description="test the database connection"> 
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-database"/>
	    </java>
	</target>	

	<target name="commons-init" depends="commons-compile,check-commons-batch-config" > 
		<java fork="true" dir="${build.dir}" classname="${batch-class}">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="init"/>
	    </java>
	</target>	

	<target name="test-beans" depends="commons-compile,check-commons-batch-config" description="test all the beans"> 
		<java fork="true" dir="${build.dir}" classname="${batch-class}">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-beans"/>
	    </java>
	</target>	

	<target name="commons-upgrade" depends="commons-compile,check-commons-batch-config" > 
		<java fork="true" dir="${build.dir}" classname="${batch-class}">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="upgrade"/>
	    </java>
	</target>	

	<target name="commons-check-version" depends="commons-compile,check-commons-batch-config" > 
		<java fork="true" dir="${build.dir}" classname="${batch-class}">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="check-version"/>
	    </java>
	</target>	

	<target name="commons-start-tomcat" depends="check-tomcat" >
		<if>
			<and>
				<ispropertyfalse property="devel" />
				<ispropertyfalse property="quick-start" />
			</and>
			<then>
				<fail>This target is available for quick-start installations only.</fail>
			</then>
		</if>
		<echo message="Starting Tomcat..."/>
		<echo message="tomcat.home = ${tomcat.home}"/>
		<java 
			fork="true" 
			dir="${tomcat.home}"
			classname="org.apache.catalina.startup.Bootstrap">
			<classpath>
				<pathelement path="${tomcat.bootstrap}"/>
				<!--pathelement path="${deploy.home}"/-->
			</classpath>
			<sysproperty key="catalina.home" value="${tomcat.home}"/> 
			<sysproperty key="log4j.configuration" value="file:${log4j.config}" />
			<jvmarg value="-Djavax.net.ssl.trustStore=${tomcat.keystore}" />
			<arg value="start"/>
		</java>
	</target>

	<target name="commons-stop-tomcat" depends="check-tomcat" >
		<if>
			<and>
				<ispropertyfalse property="devel" />
				<ispropertyfalse property="quick-start" />
			</and>
			<then>
				<fail>This target is available for quick-start installations only.</fail>
			</then>
		</if>
		<echo message="Stopping Tomcat..."/>
		<java 
			fork="true" 
			dir="${tomcat.home}"
			classname="org.apache.catalina.startup.Bootstrap">
			<classpath>
				<pathelement path="${tomcat.bootstrap}"/>
			</classpath>
			<sysproperty key="catalina.home" value="${tomcat.home}"/> 
			<arg value="stop"/>
		</java>
	</target>

</project>


